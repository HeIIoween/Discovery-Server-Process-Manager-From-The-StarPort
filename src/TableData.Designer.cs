//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DSProcessManager {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TableData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TableData : global::System.Data.DataSet {
        
        private NetworkInfoDataTable tableNetworkInfo;
        
        private PlayerInfoDataTable tablePlayerInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TableData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TableData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["NetworkInfo"] != null)) {
                    base.Tables.Add(new NetworkInfoDataTable(ds.Tables["NetworkInfo"]));
                }
                if ((ds.Tables["PlayerInfo"] != null)) {
                    base.Tables.Add(new PlayerInfoDataTable(ds.Tables["PlayerInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NetworkInfoDataTable NetworkInfo {
            get {
                return this.tableNetworkInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlayerInfoDataTable PlayerInfo {
            get {
                return this.tablePlayerInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TableData cln = ((TableData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["NetworkInfo"] != null)) {
                    base.Tables.Add(new NetworkInfoDataTable(ds.Tables["NetworkInfo"]));
                }
                if ((ds.Tables["PlayerInfo"] != null)) {
                    base.Tables.Add(new PlayerInfoDataTable(ds.Tables["PlayerInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableNetworkInfo = ((NetworkInfoDataTable)(base.Tables["NetworkInfo"]));
            if ((initTable == true)) {
                if ((this.tableNetworkInfo != null)) {
                    this.tableNetworkInfo.InitVars();
                }
            }
            this.tablePlayerInfo = ((PlayerInfoDataTable)(base.Tables["PlayerInfo"]));
            if ((initTable == true)) {
                if ((this.tablePlayerInfo != null)) {
                    this.tablePlayerInfo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TableData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TableData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableNetworkInfo = new NetworkInfoDataTable();
            base.Tables.Add(this.tableNetworkInfo);
            this.tablePlayerInfo = new PlayerInfoDataTable();
            base.Tables.Add(this.tablePlayerInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNetworkInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePlayerInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TableData ds = new TableData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void NetworkInfoRowChangeEventHandler(object sender, NetworkInfoRowChangeEvent e);
        
        public delegate void PlayerInfoRowChangeEventHandler(object sender, PlayerInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NetworkInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnColIP;
            
            private global::System.Data.DataColumn columnColInNow;
            
            private global::System.Data.DataColumn columnColIn10Min;
            
            private global::System.Data.DataColumn columnColOutNow;
            
            private global::System.Data.DataColumn columnColOut10Min;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworkInfoDataTable() {
                this.TableName = "NetworkInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NetworkInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NetworkInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColIPColumn {
                get {
                    return this.columnColIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColInNowColumn {
                get {
                    return this.columnColInNow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColIn10MinColumn {
                get {
                    return this.columnColIn10Min;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColOutNowColumn {
                get {
                    return this.columnColOutNow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColOut10MinColumn {
                get {
                    return this.columnColOut10Min;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworkInfoRow this[int index] {
                get {
                    return ((NetworkInfoRow)(this.Rows[index]));
                }
            }
            
            public event NetworkInfoRowChangeEventHandler NetworkInfoRowChanging;
            
            public event NetworkInfoRowChangeEventHandler NetworkInfoRowChanged;
            
            public event NetworkInfoRowChangeEventHandler NetworkInfoRowDeleting;
            
            public event NetworkInfoRowChangeEventHandler NetworkInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNetworkInfoRow(NetworkInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworkInfoRow AddNetworkInfoRow(object ColIP, double ColInNow, double ColIn10Min, double ColOutNow, double ColOut10Min) {
                NetworkInfoRow rowNetworkInfoRow = ((NetworkInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ColIP,
                        ColInNow,
                        ColIn10Min,
                        ColOutNow,
                        ColOut10Min};
                rowNetworkInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNetworkInfoRow);
                return rowNetworkInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworkInfoRow FindByColIP(object ColIP) {
                return ((NetworkInfoRow)(this.Rows.Find(new object[] {
                            ColIP})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NetworkInfoDataTable cln = ((NetworkInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NetworkInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnColIP = base.Columns["ColIP"];
                this.columnColInNow = base.Columns["ColInNow"];
                this.columnColIn10Min = base.Columns["ColIn10Min"];
                this.columnColOutNow = base.Columns["ColOutNow"];
                this.columnColOut10Min = base.Columns["ColOut10Min"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnColIP = new global::System.Data.DataColumn("ColIP", typeof(object), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColIP);
                this.columnColInNow = new global::System.Data.DataColumn("ColInNow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColInNow);
                this.columnColIn10Min = new global::System.Data.DataColumn("ColIn10Min", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColIn10Min);
                this.columnColOutNow = new global::System.Data.DataColumn("ColOutNow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColOutNow);
                this.columnColOut10Min = new global::System.Data.DataColumn("ColOut10Min", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColOut10Min);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnColIP}, true));
                this.columnColIP.AllowDBNull = false;
                this.columnColIP.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworkInfoRow NewNetworkInfoRow() {
                return ((NetworkInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NetworkInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NetworkInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NetworkInfoRowChanged != null)) {
                    this.NetworkInfoRowChanged(this, new NetworkInfoRowChangeEvent(((NetworkInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NetworkInfoRowChanging != null)) {
                    this.NetworkInfoRowChanging(this, new NetworkInfoRowChangeEvent(((NetworkInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NetworkInfoRowDeleted != null)) {
                    this.NetworkInfoRowDeleted(this, new NetworkInfoRowChangeEvent(((NetworkInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NetworkInfoRowDeleting != null)) {
                    this.NetworkInfoRowDeleting(this, new NetworkInfoRowChangeEvent(((NetworkInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNetworkInfoRow(NetworkInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TableData ds = new TableData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NetworkInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlayerInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnColID;
            
            private global::System.Data.DataColumn columnColCharname;
            
            private global::System.Data.DataColumn columnColIP;
            
            private global::System.Data.DataColumn columnColPing;
            
            private global::System.Data.DataColumn columnColSystem;
            
            private global::System.Data.DataColumn columnColLoss;
            
            private global::System.Data.DataColumn columnColLag;
            
            private global::System.Data.DataColumn columnColPingFluct;
            
            private global::System.Data.DataColumn columnColSaturation;
            
            private global::System.Data.DataColumn columnColTxQueue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayerInfoDataTable() {
                this.TableName = "PlayerInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlayerInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PlayerInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColIDColumn {
                get {
                    return this.columnColID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColCharnameColumn {
                get {
                    return this.columnColCharname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColIPColumn {
                get {
                    return this.columnColIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColPingColumn {
                get {
                    return this.columnColPing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColSystemColumn {
                get {
                    return this.columnColSystem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColLossColumn {
                get {
                    return this.columnColLoss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColLagColumn {
                get {
                    return this.columnColLag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColPingFluctColumn {
                get {
                    return this.columnColPingFluct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColSaturationColumn {
                get {
                    return this.columnColSaturation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColTxQueueColumn {
                get {
                    return this.columnColTxQueue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayerInfoRow this[int index] {
                get {
                    return ((PlayerInfoRow)(this.Rows[index]));
                }
            }
            
            public event PlayerInfoRowChangeEventHandler PlayerInfoRowChanging;
            
            public event PlayerInfoRowChangeEventHandler PlayerInfoRowChanged;
            
            public event PlayerInfoRowChangeEventHandler PlayerInfoRowDeleting;
            
            public event PlayerInfoRowChangeEventHandler PlayerInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPlayerInfoRow(PlayerInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayerInfoRow AddPlayerInfoRow(int ColID, string ColCharname, object ColIP, int ColPing, string ColSystem, int ColLoss, int ColLag, int ColPingFluct, int ColSaturation, int ColTxQueue) {
                PlayerInfoRow rowPlayerInfoRow = ((PlayerInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ColID,
                        ColCharname,
                        ColIP,
                        ColPing,
                        ColSystem,
                        ColLoss,
                        ColLag,
                        ColPingFluct,
                        ColSaturation,
                        ColTxQueue};
                rowPlayerInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPlayerInfoRow);
                return rowPlayerInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayerInfoRow FindByColID(int ColID) {
                return ((PlayerInfoRow)(this.Rows.Find(new object[] {
                            ColID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PlayerInfoDataTable cln = ((PlayerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PlayerInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnColID = base.Columns["ColID"];
                this.columnColCharname = base.Columns["ColCharname"];
                this.columnColIP = base.Columns["ColIP"];
                this.columnColPing = base.Columns["ColPing"];
                this.columnColSystem = base.Columns["ColSystem"];
                this.columnColLoss = base.Columns["ColLoss"];
                this.columnColLag = base.Columns["ColLag"];
                this.columnColPingFluct = base.Columns["ColPingFluct"];
                this.columnColSaturation = base.Columns["ColSaturation"];
                this.columnColTxQueue = base.Columns["ColTxQueue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnColID = new global::System.Data.DataColumn("ColID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColID);
                this.columnColCharname = new global::System.Data.DataColumn("ColCharname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColCharname);
                this.columnColIP = new global::System.Data.DataColumn("ColIP", typeof(object), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColIP);
                this.columnColPing = new global::System.Data.DataColumn("ColPing", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColPing);
                this.columnColSystem = new global::System.Data.DataColumn("ColSystem", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColSystem);
                this.columnColLoss = new global::System.Data.DataColumn("ColLoss", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColLoss);
                this.columnColLag = new global::System.Data.DataColumn("ColLag", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColLag);
                this.columnColPingFluct = new global::System.Data.DataColumn("ColPingFluct", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColPingFluct);
                this.columnColSaturation = new global::System.Data.DataColumn("ColSaturation", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColSaturation);
                this.columnColTxQueue = new global::System.Data.DataColumn("ColTxQueue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColTxQueue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnColID}, true));
                this.columnColID.AllowDBNull = false;
                this.columnColID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayerInfoRow NewPlayerInfoRow() {
                return ((PlayerInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PlayerInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PlayerInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlayerInfoRowChanged != null)) {
                    this.PlayerInfoRowChanged(this, new PlayerInfoRowChangeEvent(((PlayerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlayerInfoRowChanging != null)) {
                    this.PlayerInfoRowChanging(this, new PlayerInfoRowChangeEvent(((PlayerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlayerInfoRowDeleted != null)) {
                    this.PlayerInfoRowDeleted(this, new PlayerInfoRowChangeEvent(((PlayerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlayerInfoRowDeleting != null)) {
                    this.PlayerInfoRowDeleting(this, new PlayerInfoRowChangeEvent(((PlayerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePlayerInfoRow(PlayerInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TableData ds = new TableData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlayerInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NetworkInfoRow : global::System.Data.DataRow {
            
            private NetworkInfoDataTable tableNetworkInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NetworkInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNetworkInfo = ((NetworkInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public object ColIP {
                get {
                    return ((object)(this[this.tableNetworkInfo.ColIPColumn]));
                }
                set {
                    this[this.tableNetworkInfo.ColIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ColInNow {
                get {
                    try {
                        return ((double)(this[this.tableNetworkInfo.ColInNowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColInNow\' in table \'NetworkInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNetworkInfo.ColInNowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ColIn10Min {
                get {
                    try {
                        return ((double)(this[this.tableNetworkInfo.ColIn10MinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColIn10Min\' in table \'NetworkInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNetworkInfo.ColIn10MinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ColOutNow {
                get {
                    try {
                        return ((double)(this[this.tableNetworkInfo.ColOutNowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColOutNow\' in table \'NetworkInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNetworkInfo.ColOutNowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ColOut10Min {
                get {
                    try {
                        return ((double)(this[this.tableNetworkInfo.ColOut10MinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColOut10Min\' in table \'NetworkInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNetworkInfo.ColOut10MinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColInNowNull() {
                return this.IsNull(this.tableNetworkInfo.ColInNowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColInNowNull() {
                this[this.tableNetworkInfo.ColInNowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColIn10MinNull() {
                return this.IsNull(this.tableNetworkInfo.ColIn10MinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColIn10MinNull() {
                this[this.tableNetworkInfo.ColIn10MinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColOutNowNull() {
                return this.IsNull(this.tableNetworkInfo.ColOutNowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColOutNowNull() {
                this[this.tableNetworkInfo.ColOutNowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColOut10MinNull() {
                return this.IsNull(this.tableNetworkInfo.ColOut10MinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColOut10MinNull() {
                this[this.tableNetworkInfo.ColOut10MinColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PlayerInfoRow : global::System.Data.DataRow {
            
            private PlayerInfoDataTable tablePlayerInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlayerInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlayerInfo = ((PlayerInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ColID {
                get {
                    return ((int)(this[this.tablePlayerInfo.ColIDColumn]));
                }
                set {
                    this[this.tablePlayerInfo.ColIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ColCharname {
                get {
                    try {
                        return ((string)(this[this.tablePlayerInfo.ColCharnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColCharname\' in table \'PlayerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlayerInfo.ColCharnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public object ColIP {
                get {
                    try {
                        return ((object)(this[this.tablePlayerInfo.ColIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColIP\' in table \'PlayerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlayerInfo.ColIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ColPing {
                get {
                    try {
                        return ((int)(this[this.tablePlayerInfo.ColPingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColPing\' in table \'PlayerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlayerInfo.ColPingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ColSystem {
                get {
                    try {
                        return ((string)(this[this.tablePlayerInfo.ColSystemColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColSystem\' in table \'PlayerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlayerInfo.ColSystemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ColLoss {
                get {
                    try {
                        return ((int)(this[this.tablePlayerInfo.ColLossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColLoss\' in table \'PlayerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlayerInfo.ColLossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ColLag {
                get {
                    try {
                        return ((int)(this[this.tablePlayerInfo.ColLagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColLag\' in table \'PlayerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlayerInfo.ColLagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ColPingFluct {
                get {
                    try {
                        return ((int)(this[this.tablePlayerInfo.ColPingFluctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColPingFluct\' in table \'PlayerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlayerInfo.ColPingFluctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ColSaturation {
                get {
                    try {
                        return ((int)(this[this.tablePlayerInfo.ColSaturationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColSaturation\' in table \'PlayerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlayerInfo.ColSaturationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ColTxQueue {
                get {
                    try {
                        return ((int)(this[this.tablePlayerInfo.ColTxQueueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColTxQueue\' in table \'PlayerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlayerInfo.ColTxQueueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColCharnameNull() {
                return this.IsNull(this.tablePlayerInfo.ColCharnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColCharnameNull() {
                this[this.tablePlayerInfo.ColCharnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColIPNull() {
                return this.IsNull(this.tablePlayerInfo.ColIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColIPNull() {
                this[this.tablePlayerInfo.ColIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColPingNull() {
                return this.IsNull(this.tablePlayerInfo.ColPingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColPingNull() {
                this[this.tablePlayerInfo.ColPingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColSystemNull() {
                return this.IsNull(this.tablePlayerInfo.ColSystemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColSystemNull() {
                this[this.tablePlayerInfo.ColSystemColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColLossNull() {
                return this.IsNull(this.tablePlayerInfo.ColLossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColLossNull() {
                this[this.tablePlayerInfo.ColLossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColLagNull() {
                return this.IsNull(this.tablePlayerInfo.ColLagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColLagNull() {
                this[this.tablePlayerInfo.ColLagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColPingFluctNull() {
                return this.IsNull(this.tablePlayerInfo.ColPingFluctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColPingFluctNull() {
                this[this.tablePlayerInfo.ColPingFluctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColSaturationNull() {
                return this.IsNull(this.tablePlayerInfo.ColSaturationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColSaturationNull() {
                this[this.tablePlayerInfo.ColSaturationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColTxQueueNull() {
                return this.IsNull(this.tablePlayerInfo.ColTxQueueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColTxQueueNull() {
                this[this.tablePlayerInfo.ColTxQueueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NetworkInfoRowChangeEvent : global::System.EventArgs {
            
            private NetworkInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworkInfoRowChangeEvent(NetworkInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworkInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PlayerInfoRowChangeEvent : global::System.EventArgs {
            
            private PlayerInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayerInfoRowChangeEvent(PlayerInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591